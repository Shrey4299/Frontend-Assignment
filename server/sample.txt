const express = require('express');
const bodyParser = require("body-parser");
const axios = require("axios");
const dotenv = require('dotenv');

const app = express();

// Load environment variables from the .env file
dotenv.config();

app.use(function (req, res, next) {
    const allowedOrigins = ['http://localhost:3000'];
    const origin = req.headers.origin;
    if (allowedOrigins.includes(origin)) {
        res.setHeader('Access-Control-Allow-Origin', origin);
    }
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
    res.header("Access-Control-Allow-credentials", true);
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, UPDATE");
    next();
});

app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(bodyParser.json());

app.enable('trust proxy');

app.get('/', (req, res) => {
    res.status(200).send("Hello");
});

app.post('/api/fetchStockData', async (req, res) => {
    try {
        // Read stock symbol and date from the request body
        const { stockSymbol, date } = req.body;

        // Check if both stockSymbol and date are provided
        if (!stockSymbol || !date) {
            return res.status(400).json({ error: "Both 'stockSymbol' and 'date' are required." });
        }

        // Format the date to YYYY-MM-DD as required by the Polygon API
        const formattedDate = new Date(date).toISOString().split('T')[0];

        // Make a request to the Polygon API to fetch trade statistics for the stock on the given date
        const apiKey = process.env.POLYGON_API_KEY; // Access the Polygon API key from the environment variables
        if (!apiKey) {
            return res.status(500).json({ error: "Polygon API key not found. Make sure you have set the 'POLYGON_API_KEY' environment variable." });
        }

        const apiUrl = `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/day/${formattedDate}/${formattedDate}?apiKey=${apiKey}`;

        const response = await axios.get(apiUrl);

        // Extract the relevant trade statistics from the response
        const tradeStats = response.data.results.length > 0 ? response.data.results[0] : null;

        // Check if the stock data is available for the given date
        if (!tradeStats) {
            return res.status(404).json({ error: `No trade statistics found for stock '${stockSymbol}' on date '${formattedDate}'` });
        }

        // Return only the required fields in the response in JSON format
        const requiredFields = {
            stockSymbol: tradeStats.T,
            date: tradeStats.t,
            openPrice: tradeStats.o,
            highPrice: tradeStats.h,
            lowPrice: tradeStats.l,
            closePrice: tradeStats.c,
            volume: tradeStats.v,
        };

        res.status(200).json(requiredFields);
    } catch (error) {
        console.error("Error fetching stock data:", error.message);
        res.status(500).json({ error: "Internal server error" });
    }
});



const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`Listening on port ${port}`));
